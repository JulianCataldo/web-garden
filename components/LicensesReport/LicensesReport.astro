---
import licenser from '@wbmnky/license-report-generator';
/* ·········································································· */
import cache from './cache';
/* ·········································································· */
import type { Props as baseProps, Licenses } from './Props';

export interface Props extends baseProps {}
const props = { ...Astro.props } as Props;
/* ———————————————————————————————————————————— Typeguards + Fallbacks —————— */
const internalProps: string[] = [];

if (typeof props.depth !== 'number') props.depth = 2;
internalProps.push('depth');

if (typeof props.useDev !== 'boolean') props.useDev = true;
internalProps.push('useDev');

if (typeof props.packagePath !== 'string') props.packagePath = undefined;
internalProps.push('packagePath');

if (typeof props.nameText !== 'string') props.nameText = 'Package';
internalProps.push('nameText');

if (typeof props.authorText !== 'string') props.authorText = 'Author';
internalProps.push('authorText');

if (typeof props.licenseText !== 'string') props.licenseText = 'License';
internalProps.push('licenseText');

if (typeof props.linkText !== 'string') props.linkText = 'URL';
internalProps.push('linkText');

/* ············································ Extra HTML attributes ······· */
const extraAttrs: { [key: string]: string } = {};
Object.entries(props).forEach(([key, val]) => {
  if (internalProps.includes(key) === false) {
    extraAttrs[key] = `${val as string}`;
  }
});
/* —————————————————————————————————————————————————————————————————————————— */

interface Options {
  useDev: boolean;
  depth: number;
  packagePath?: string;
}
const options = {
  useDev: props.useDev,
  depth: props.depth,
} as Options;
if (props.packagePath) {
  options.packagePath = props.packagePath;
}

/* We don't want to regenerate the report if nothing has changed */
function generateHash(data: string) {
  // Dark magic: https://stackoverflow.com/a/7616484/2890472
  let hash = 0;
  let i;
  let chr;
  if (data.length === 0) return hash;
  for (i = 0; i < data.length; i += 1) {
    chr = data.charCodeAt(i);
    // eslint-disable-next-line no-bitwise
    hash = (hash << 5) - hash + chr;
    // eslint-disable-next-line no-bitwise
    hash |= 0; // Convert to 32bit integer
  }
  return hash;
}

const userData = JSON.stringify(options);
const uniqueKey = `${generateHash(userData)}`;

if (cache[uniqueKey] === undefined) {
  /* Fetch dependencies */
  const result =
    (await licenser.reporter
      .generate(options)
      .then((rep) => {
        const plain = rep.plain() as { licenses: Licenses[] };
        return plain.licenses;
      })
      .catch((/* error */) => {
        // console.log(error);
      })) || {};

  /* Store report data to cache */
  cache[uniqueKey] = result;
}

const report = cache[uniqueKey];
---

<div class:list={['table', props.class]} role="table" {...extraAttrs}>
  <div class:list={['thead', props.class]} role="rowgroup">
    <div class:list={['tr', props.class]} role="row">
      <div class:list={['th', props.class]} role="columnheader">
        {props.nameText}
      </div>
      <div class:list={['th', props.class]} role="columnheader">
        {props.authorText}
      </div>
      <div class:list={['th', props.class]} role="columnheader">
        {props.licenseText}
      </div>
      <div class:list={['th', props.class]} role="columnheader">
        {props.linkText}
      </div>
    </div>
  </div>

  <div class:list={['tbody', props.class]} role="rowgroup">
    {
      report.length &&
      report.map((row) => (
        <div class:list={['tr', props.class]} role="row">
          <div class:list={['td', props.class]} role="cell">
            {row.name}
          </div>

          <div class:list={['td', props.class]} role="cell">
            {typeof row.author === 'string'
              ? row.author
              : row?.author?.name || '-'}
          </div>

          <div class:list={['td', props.class]} role="cell">
            {row.license}
          </div>

          <div class:list={['td', props.class]} role="cell">
            {row.homepage || row.repository.url
              ? <a
                class:list="[is-external]"
                href={row.homepage || row.repository.url}
                target="_blank"
                rel="noopener nofollow"
              >
                {row.homepage || row.repository.url}
              </a>
              : '-'
            }
          </div>
        </div>
      ))
    }
  </div>
</div>
