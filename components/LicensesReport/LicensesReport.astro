---
import licenser from '@wbmnky/license-report-generator';

export interface Props {
  /**
   * **Default**: `2`
   * */
  depth?: number;
  /**
   * **Default**: `true`
   * */
  useDevDependencies?: boolean;
  /* ————————————————————————————— */
  /**
   * **Default**: `'Package'`
   * */
  nameText?: string;
  /**
   * **Default**: `'Author'`
   * */
  authorText?: string;
  /**
   * **Default**: `'License'`
   * */
  licenseText?: string;
  /**
   * **Default**: `'URL'`
   * */
  linkText?: string;
}
const props = {...Astro.props} as Props;
/* ———————————————————————————————————————————— Typeguards + Fallbacks —————— */
if (typeof props.depth !== 'number') {
  props.depth = 2;
}
if (typeof props.useDevDependencies !== 'boolean') {
  props.useDevDependencies = true;
}
if (typeof props.nameText !== 'string') {
  props.nameText = 'Package';
}
if (typeof props.authorText !== 'string') {
  props.authorText = 'Author';
}
if (typeof props.licenseText !== 'string') {
  props.licenseText = 'License';
}
if (typeof props.linkText !== 'string') {
  props.linkText = 'URL';
}
/* —————————————————————————————————————————————————————————————————————————— */

interface Licenses {
  name?: string;
  author?: string | { name: string } | undefined;
  homepage?: string | undefined;
  license?: string | undefined;
  repository?: { url: string };
}

const options = {
  useDevDependencies: props.useDevDependencies,
  depth: props.depth,
};

const report =
  (await licenser.reporter
    .generate(options)
    .then((rep) => {
      const plain = rep.plain() as { licenses: Licenses[] };
      return plain.licenses;
    })
    .catch((/* error */) => {
      // console.log(error);
    })) || [];
---

<table class="licenses-report">
  <thead class="table-header">
    <tr class="row">
      <th class="header name">{props.nameText}</th>
      <th class="header author">{props.authorText}</th>
      <th class="header license">{props.licenseText}</th>
      <th class="header link">{props.linkText}</th>
    </tr>
  </thead>

  <tbody class="table-body">
    {report.map((row) => (
      <tr class="row">
        <td class="column name">{row.name}</td>

        <td class="column author">
          {typeof row.author === "string"
            ? row.author
            : row?.author?.name || "-"}
        </td>

        <td class="column license">{row.license}</td>

        <td class="column link">
          <a
            class="link is-external"
            href={row.homepage || row.repository.url}
            target="_blank"
            rel="noopener nofollow"
          >
            {row.homepage || row.repository.url}
          </a>
        </td>
      </tr>
    ))}
  </tbody>
</table>
