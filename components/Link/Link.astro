---
export interface Props {
  href: string;
  /**
   * **Default**: `null`
   * */
  title?: string | null;
  /**
   * Whether to show external link icon or not.
   *
   * **Default**: `true`
   * */
  externalHint?: boolean;
  /**
   * Open external link in a new tab/window.
   *
   * **Default**: `true`
   * */
  externalInNewTab?: boolean;
}
const props = { ...Astro.props } as Props;
/* ———————————————————————————————————————————— Typeguards + Fallbacks —————— */
if (typeof props.href !== 'string') {
  props.href = '#';
  console.warn('> Missing `href` property for <Link>');
}
if (typeof props.title !== 'string') {
  props.title = null;
}
if (typeof props.externalHint !== 'boolean') {
  props.externalHint = true;
}
if (typeof props.externalInNewTab !== 'boolean') {
  props.externalInNewTab = true;
}
/* —————————————————————————————————————————————————————————————————————————— */

/* Link type(s) */
const isExternal = props.href.startsWith('http');
const isHash = props.href.startsWith('#');
const isMail = props.href.startsWith('mailto:');
const isTel = props.href.startsWith('tel:');

/* Get contact link data */
let contact;
if (isMail) {
  contact = props.href.replace('mailto:', '');
} else if (isTel) {
  contact = props.href.replace('tel:', '');
}

/* Pre-process `href` */
let parsedUrl = props.href;
if (isExternal === false) {
  const basePrefix = import.meta.env.BASE_URL;
  /* Join relative paths */
  parsedUrl = [...basePrefix.split('/'), ...props.href.split('/')]
    .filter((e) => e !== '')
    .join('/');
  /* Prefix with root relative */
  parsedUrl = `/${parsedUrl}`;
}
/* Hide contact link  `href` */
if (contact) {
  parsedUrl = '#';
}
---

<a
  href={parsedUrl}
  title={props.title === '' ? undefined : props.title}
  class:list={{
    link: true,
    'is-external': isExternal,
    'is-hash': isHash,
    'is-mail': isMail,
    'is-tel': isTel,
    'has-hint': isExternal ? props?.externalHint : false,
  }}
  data-contact={btoa(props.href)}
  target={isExternal && props.externalInNewTab ? '_blank' : null}
  rel={isExternal ? 'noopener nofollow' : null}
>
  <slot></slot>
</a>

<script>
  const contactLinks = [
    ...document.querySelectorAll('.link.is-mail'),
    ...document.querySelectorAll('.link.is-tel'),
  ];

  contactLinks.forEach((link) => {
    console.log(link);
    link.addEventListener('click', (e) => {
      e.preventDefault();

      const contactHrefRaw = link.getAttribute('data-contact');
      if (contactHrefRaw) {
        const contactHref = atob(contactHrefRaw);
        window.location.href = contactHref;
      }
    });
  });
</script>

<style lang='scss'>
  .link {
    &.is-external.has-hint {
      position: relative;
      padding-right: 0.95em;
    }

    &.is-external.has-hint::after {
      position: absolute;
      right: 0em;
      top: -0.1em;
      transform: rotate(90deg);
      font-size: 85%;
      content: '⎋';
    }
  }
</style>
