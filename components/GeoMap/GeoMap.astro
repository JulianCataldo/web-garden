---
import { createHash } from 'node:crypto';
import leafletStylesUrl from 'leaflet/dist/leaflet.css?url';
/* ·········································································· */
import type { Props as baseProps } from './Props';
/* —————————————————————————————————————————————————————————————————————————— */
export interface Props extends baseProps {}
const {
  ssr = true,
  htmlAttributes = {},

  width = '25rem',
  height = '25rem',

  url = 'http://{s}.tile.osm.org/{z}/{x}/{y}.png',

  center = [43.389636, 5.3964332],
  zoom = 10,
  ...leafletOptions
} = Astro.props as Props;

const settings = {
  url,
  width,
  height,
  leafletOptions: { center, zoom, ...leafletOptions },
};

/* — SSR ONLY — */
let src;
async function getSrc(fPath: string) {
  return import(`${fPath}?url`).then((r) => r.default).catch(() => null);
}
if (ssr) {
  const { render } = await import('./render');

  const hash = createHash('sha256')
    .update(JSON.stringify(settings))
    .digest('hex');
  const cacheDir =
    import.meta.env.GEO_MAP_CACHE_DIR ?? '/node_modules/.astro-geo-map';
  const fPath = `${cacheDir}/${hash}.png`;

  src = await getSrc(fPath);
  if (src !== fPath) {
    await render({ settings, hash, cacheDir });
    src = await getSrc(fPath);
  }
}
---

<astro-geo-map
  {...htmlAttributes}
  data-settings={JSON.stringify(settings)}
  data-styles-href={leafletStylesUrl}
  style={{ width, height, display: 'block' }}
>
  {
    ssr && src && (
      <img
        src={src}
        alt="Geographical map"
        style={{ position: 'absolute', width, height }}
      />
    )
  }
</astro-geo-map>

<script>
  import Leaflet from 'leaflet';

  class AstroGeoMap extends HTMLElement {
    constructor() {
      super();

      const settings = JSON.parse(this.getAttribute('data-settings')!);
      const styleUrl = this.getAttribute('data-styles-href')!;

      const holder = this.appendChild(document.createElement('div'));
      const holderShadow = holder.attachShadow({ mode: 'open' });
      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = styleUrl;
      holderShadow.appendChild(link);

      const mapElem = holderShadow.appendChild(document.createElement('div'));

      mapElem.style.width = settings.width;
      mapElem.style.height = settings.height;

      mapElem.style.pointerEvents = 'none';
      mapElem.style.transition = 'opacity 0.3334s 0.1s';
      mapElem.style.opacity = '0';

      const mapInstance = Leaflet.map(mapElem, settings.leafletOptions);
      const layer = new Leaflet.TileLayer(settings.url);
      mapInstance.addLayer(layer);

      layer.addEventListener('load', () => {
        mapElem.style.opacity = '1';
        mapElem.style.pointerEvents = 'initial';
      });
    }
  }

  window.customElements.define('astro-geo-map', AstroGeoMap);
</script>
