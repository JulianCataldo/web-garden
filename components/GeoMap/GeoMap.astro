---
import type { LatLngTuple } from 'leaflet';
import { existsSync } from 'node:fs';
import path from 'node:path';
import { paramCase } from 'change-case';

// HACK: Vite is not resolving CSS URLs
// import leafletStylesUrl from 'leaflet/dist/leaflet.css?url';
/* ·········································································· */
import type { Props as baseProps } from './Props';
/* —————————————————————————————————————————————————————————————————————————— */

export interface Props extends baseProps {}
const {
  ssr = true,
  htmlAttributes = {},

  url = undefined,
  address = undefined,

  width = '25rem',
  height = '25rem',

  ...leafletOptions
} = Astro.props as Props;

const defaultUrl = 'https://{s}.tile.osm.org/{z}/{x}/{y}.png';
const defaultCenter: LatLngTuple = [43.389636, 5.3964332];
const defaultZoom = 10;

/* ·········································································· */

let coordFromAddress: LatLngTuple = [0, 0];
if (address) {
  const locationApiUrl =
    'https://nominatim.openstreetmap.org/search?format=json&limit=3&q=';
  const res = await fetch(
    `${locationApiUrl}${encodeURIComponent(address)}`,
  ).then((r) => r.json());
  if (res.length) {
    coordFromAddress = [parseFloat(res[0].lat), parseFloat(res[0].lon)];
  }
}
console.log(coordFromAddress);
const settings = {
  address,
  width,
  height,
  url,
  leafletOptions: {
    center: address ? coordFromAddress : undefined,
    ...leafletOptions,
  },
};

/* ·········································································· */

// HACK: Workaround for Vite bug, we use this instead of a local CSS
const leafletStylesUrl =
  'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.8.0/leaflet.min.css';

const outputDir = import.meta.env.GEO_MAP_OUTPUT_DIR ?? 'public/assets/maps';
const urlPath = import.meta.env.GEO_MAP_URL_PATH ?? '/assets/maps';

/* ·········································································· */
/* — SSR ONLY — */
let src;
if (ssr) {
  const { render } = await import('./render');

  const mapId = paramCase(JSON.stringify(settings))
    .replaceAll('http://', '')
    .replaceAll('address-', '@')
    .replaceAll('width', '@w')
    .replaceAll('height', '@h')
    .replaceAll('center', '@c')
    .replaceAll('zoom', '@z')
    .replace('-leaflet-options', '');
  console.log({ mapId, d: JSON.stringify(settings) });

  const fileName = `${mapId}.png`;
  const fPath = path.join(outputDir, fileName);
  src = path.join(urlPath, fileName);

  const abs = path.join(process.cwd(), fPath);
  if (!existsSync(abs)) {
    await render({
      settings: {
        ...settings,
        url: settings.url || defaultUrl,
        leafletOptions: {
          ...settings.leafletOptions,
          zoom: settings.leafletOptions.zoom || defaultZoom,
          center: settings.leafletOptions.center || defaultCenter,
        },
      },

      mapId,
      outputDir,
    });
  }
}
---

<astro-geo-map
  {...htmlAttributes}
  data-settings={JSON.stringify(settings)}
  data-styles-href={leafletStylesUrl}
  style={{ width, height, display: 'block' }}
>
  {
    ssr && src && (
      <img
        src={src}
        alt="Geographical map"
        style={{ position: 'absolute', width, height }}
      />
    )
  }
</astro-geo-map>

<script>
  import Leaflet from 'leaflet';

  class AstroGeoMap extends HTMLElement {
    constructor() {
      super();

      const settings = JSON.parse(this.getAttribute('data-settings')!);
      const styleUrl = this.getAttribute('data-styles-href')!;

      const holder = this.appendChild(document.createElement('div'));
      const holderShadow = holder.attachShadow({ mode: 'open' });
      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = styleUrl;
      holderShadow.appendChild(link);

      const mapElem = document.createElement('div');
      mapElem.style.width = settings.width;
      mapElem.style.height = settings.height;
      mapElem.style.pointerEvents = 'none';
      mapElem.style.transition = 'opacity 0.3334s 0.1s';
      mapElem.style.opacity = '0';

      link.addEventListener('load', () => {
        holderShadow.appendChild(mapElem);

        const mapInstance = Leaflet.map(mapElem, {
          attributionControl: false,
          ...settings.leafletOptions,
        });
        const layer = new Leaflet.TileLayer(settings.url, {
          // TODO: Proper support for retina
          // Actual problem: too small, why?
          // detectRetina: true,
          //// tileSize: 64 * 2,
          //// zoomOffset: 1,
        });
        mapInstance.addLayer(layer);

        layer.addEventListener('load', () => {
          mapElem.style.opacity = '1';
          mapElem.style.pointerEvents = 'initial';
        });
      });
    }
  }

  window.customElements.define('astro-geo-map', AstroGeoMap);
</script>
