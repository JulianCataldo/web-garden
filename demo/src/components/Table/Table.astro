---
import type { Props as baseProps } from './Props';

export interface Props extends baseProps {}
const props = { ...Astro.props } as Props;
/* ———————————————————————————————————————————— Typeguards + Fallbacks —————— */
// const internalProps: string[] = [];
/* ············································ Extra HTML attributes ······· */
const extraAttrs: { [key: string]: string } = {};
// Object.entries(props).forEach(([key, val]) => {
//   if (internalProps.includes(key) === false) {
//     extraAttrs[key] = `${val as string}`;
//   }
// });
/* —————————————————————————————————————————————————————————————————————————— */

interface Data {}
const headers = Object.entries(props.data[0]);
// const rows = Object.entries(props.data)
---

<div
  class:list={[
    'table',
    props.class,
    //  props.customRootClass
  ]}
  role='table'
  {...extraAttrs}
>
  <div class:list={['thead', props.class]} role='rowgroup'>
    <div class:list={['tr', props.class]} role='row'>
      {headers.map(([index]) => (
        <div
          class:list={['th', `col-${index}`, props.class]}
          role="columnheader"
        >
          {index}
        </div>
      ))}
    </div>
  </div>

  <div class:list={['tbody', props.class]} role='rowgroup'>
    {props.data.map((row) => (
      <div class:list={['tr', props.class]} role="row">
        {Object.entries(row).map(([colIndex, colValue]) => (
          <div class:list={['td', `col-${colIndex}`, props.class]} role="cell">
            {`${colValue}`}
          </div>
        ))}
      </div>
    ))}
  </div>
</div>

<style lang='scss' define:vars={{ colCount: headers.length }}>
  .table:not(.unstyled) {
    width: 100%;
    overflow-x: auto;
    .tr {
      display: flex;
    }

    .td,
    .th {
      word-break: break-all;
      overflow: hidden;

      width: var(--width, calc(100% / var(--colCount)));
      min-width: 10rem;
    }
  }
</style>
