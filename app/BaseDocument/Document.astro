---
import type { Props as baseProps } from './Props';

export interface Props extends baseProps {}
const props = { ...Astro.props } as Props;
/* ———————————————————————————————————————————— Typeguards + Fallbacks —————— */
const internalProps: string[] = ['class:list'];

if (typeof props.jsEnabledClass !== 'boolean') props.jsEnabledClass = true;
internalProps.push('jsEnabledClass');
if (typeof props.redirectTo !== 'string') props.redirectTo = null;
internalProps.push('redirectTo');
if (typeof props.lang !== 'string') props.lang = 'en';
internalProps.push('lang');
/* ·········································································· */
const extraAttrs: { [key: string]: string } = {};
Object.entries(props).forEach(([key, val]) => {
  if (internalProps.includes(key) === false) {
    extraAttrs[key] = `${val as string}`;
  }
});
/* —————————————————————————————————————————————————————————————————————————— */
---

<!DOCTYPE html>
<html lang={props.lang} {...extraAttrs} class:list={props['class:list']}>
  <head>
    <!-- CRITICAL:
      This adds 'js' class to HTML tag if JavaScript is enabled on browser -->
    {
      props.jsEnabledClass && (
        <script is:inline>document.documentElement.classList.add('js');</script>
      )
    }

    <meta charset="UTF-8" />

    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    {
      props.redirectTo && (
        <meta http-equiv="refresh" content={`0; url=${props.redirectTo}`} />
      )
    }

    <slot name="head" />
  </head>

  <slot name="body">
    {props.redirectTo && <div>Redirecting to: {props.redirectTo}</div>}
  </slot>


</html>
