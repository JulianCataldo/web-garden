---
import type { Props as baseProps } from './Props';

export interface Props extends baseProps {}
const props = { ...Astro.props } as Props;
/* ———————————————————————————————————————————— Typeguards + Fallbacks —————— */
if (typeof props.lang !== 'string') props.lang = 'en';

if (Array.isArray(props.htmlClasses) === false) props.htmlClasses = [];

if (typeof props.htmlExtraAttributes !== 'object')
  props.htmlExtraAttributes = {};

if (typeof props.bodyExtraAttributes !== 'object')
  props.bodyExtraAttributes = {};

if (Array.isArray(props.bodyClasses) === false) props.bodyClasses = [];

if (typeof props.htmlId !== 'string') props.htmlId = null;

if (typeof props.bodyId !== 'string') props.bodyId = null;

if (typeof props.jsEnabledClass !== 'boolean') props.jsEnabledClass = true;

if (typeof props.jsEnabledClass !== 'boolean') props.redirectTo = null;
/* —————————————————————————————————————————————————————————————————————————— */
---

<!DOCTYPE html>
<html
  lang={props.lang}
  class:list={[...props.htmlClasses]}
  id={props.htmlId}
  {...props.htmlExtraAttributes}
>
  <script define:vars={{ enabled: props.jsEnabledClass }} is:inline>
    // CRITICAL
    // Add 'js' class to HTML tag if JavaScript is enabled
    if (enabled) {
      (() => {
        const root = document.documentElement;
        root.classList.add('js');
      })();
    }
  </script>

  <meta charset='UTF-8' />
  <meta name='viewport' content='width=device-width, initial-scale=1' />

  {props.redirectTo && (
    <meta http-equiv="refresh" content={`0; url=/components`} />
  )}

  <slot name='head'></slot>

  <body
    class:list={[...props.bodyClasses]}
    id={props.bodyId}
    {...props.bodyExtraAttributes}
  >
    {props.redirectTo && <div>Redirecting to: {props.redirectTo}</div>}
    <slot name='body'></slot>
  </body>
</html>
