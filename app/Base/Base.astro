---
export interface Props {
  /**
   * **Default**: `'en'` (English)
   * */
  lang?: string;
  /**
   * **Default**: `[]` (no classes)
   * */
  htmlClasses?: string[];
  /**
   * **Default**: `[]` (no classes)
   * */
  bodyClasses?: string[];
  /**
   * **Default**: `null` (no id)
   * */
  htmlId?: string;
  /**
   * **Default**: `null` (no id)
   * */
  bodyId?: string;
  /**
   * Provides early JS detection for further CSS use
   * by adding `js` class critically to HTML element.
   *
   * **Default**: `true`
   * */
  jsEnabledClass?: boolean;
}
const props = { ...Astro.props } as Props;
/* ———————————————————————————————————————————— Typeguards + Fallbacks —————— */
if (typeof props.lang !== 'string') {
  props.lang = 'en';
}
if (!Array.isArray(props.htmlClasses)) {
  props.htmlClasses = [];
}
if (!Array.isArray(props.bodyClasses)) {
  props.bodyClasses = [];
}
if (typeof props.htmlId !== 'string') {
  props.htmlId = null;
}
if (typeof props.bodyId !== 'string') {
  props.bodyId = null;
}
if (typeof props.jsEnabledClass !== 'boolean') {
  props.jsEnabledClass = true;
}
/* —————————————————————————————————————————————————————————————————————————— */
---

<!DOCTYPE html>
<html lang={props.lang} class:list={[...props.htmlClasses]} id={props.htmlId}>
  <head>
    <script define:vars={{ enabled: props.jsEnabledClass }} is:inline>
      // CRITICAL
      // Add 'js' class to HTML tag if JavaScript is enabled
      if (enabled) {
        (() => {
          const root = document.getElementsByTagName('html')[0];
          root.classList.add('js');
        })();
      }
    </script>

    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1' />

    <slot name='head'></slot>
  </head>

  <body class:list={[...props.bodyClasses]} id={props.bodyId}>
    <slot name='body'></slot>
  </body>
</html>
