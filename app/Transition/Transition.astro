---
import type { Props as BaseProps } from './Props';

export interface Props extends BaseProps {}
const props = { ...Astro.props } as Props;
/* ———————————————————————————————————————————— Typeguards + Fallbacks —————— */
if (typeof props.speed !== 'number') {
  props.speed = 500;
}
if (typeof props.color !== 'string') {
  props.color = null;
}
if (typeof props.zIndex !== 'number') {
  props.zIndex = 99;
}
/* —————————————————————————————————————————————————————————————————————————— */
---

<div id='app-transition-overlay'></div>

<script is:inline>
  // Critical
  (() => {
    // console.log('Transition [Overlay] inited.');
    const overlay = document.getElementById('app-transition-overlay');
    overlay.classList.add('is-visible');

    function show() {
      overlay.classList.add('is-loaded');
      setTimeout(() => {
        overlay.classList.remove('is-visible');
      }, 2);
    }
    // Safari shim for page history instant cache
    window.addEventListener('pageshow', (e) => e.persisted && show());
    window.addEventListener('load', () => show());
  })();
</script>

<script>
  import './Transition.client';
</script>

<style
  define:vars={{
    // jsColor: props.color,
    speed: `${props.speed}ms`,
    'z-index': props.zIndex,
  }}
  lang='scss'
>
  #app-transition-overlay {
    background: var(--color, hsl(0, 0%, 100%));
    position: fixed;
    top: var(--app-navigation-height, 0);
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    pointer-events: none;
    z-index: var(--z-index, 99);
  }

  #app-transition-overlay.is-visible {
    opacity: 1;
  }

  #app-transition-overlay.is-loaded {
    transition: opacity var(--speed, 500ms);
  }
</style>
